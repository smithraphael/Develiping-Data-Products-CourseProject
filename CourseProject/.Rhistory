link_query_s = as.character()
link_s = y[i, 1]
if (!is.null(parse_url(link_s)$query$q)) {link_query_s = parse_url(link_s)$query$q
}
else if (!is.null(parse_url(link_s)$path)) {link_query_s = parse_url(link_s)$path
}
else if (!is.null(parse_url(link_s)$path)) {link_query_s = link_s
}
x_s = paste(x_s, link_query_s)
y_s = rbind(y_s, link_query_s)
}
texto = x_s
texto_1 <- gsub("http://www.", " ", texto)
texto_2 <- gsub("http://", " ", texto_1)
texto_3 <- gsub("https", " ", texto_2)
texto_4 <- gsub(".html", " ", texto_3)
texto_5 <- gsub(".net", " ", texto_4)
texto_6 <- gsub("([%20])|[%]|[&]", " ", texto_5)
texto_7 <- gsub("([[:digit:]])", " ", texto_6)
texto_8 <- gsub("(html)|(php)|(http)|(api)|(www)", " ", texto_7)
abc.corpus <- Corpus(VectorSource(texto_8))
abc.corpus <- tm_map(abc.corpus, function(x)removeWords(x,stopwords("portuguese")))
term.matrix <- TermDocumentMatrix(abc.corpus)
term.matrix <- as.matrix(term.matrix)
words_n = row.names(term.matrix)
words_n = data.frame(words_n)
n = term.matrix[, 1]
words = cbind(words_n, n)
row.names(words) = NULL
View(words)
texto = x
texto_1 <- gsub("http://www.", " ", texto)
texto_2 <- gsub("http://", " ", texto_1)
texto_3 <- gsub("https", " ", texto_2)
texto_4 <- gsub(".html", " ", texto_3)
texto_5 <- gsub(".net", " ", texto_4)
texto_6 <- gsub("([%20])|[%]|[&]", " ", texto_5)
texto_7 <- gsub("([[:digit:]])", " ", texto_6)
texto_8 <- gsub("(html)|(php)|(http)|(api)|(www)", " ", texto_7)
abc.corpus <- Corpus(VectorSource(texto_8))
abc.corpus <- tm_map(abc.corpus, function(x)removeWords(x,stopwords("portuguese")))
term.matrix <- TermDocumentMatrix(abc.corpus)
term.matrix <- as.matrix(term.matrix)
words_n = row.names(term.matrix)
words_n = data.frame(words_n)
n = term.matrix[, 1]
words = cbind(words_n, n)
row.names(words) = NULL
View(words)
parse_url(link)$query
parse_url(link)$path
parse_url(link)
end = 1:nrow(result)
parse_url(link)$url
parse_url(link)$class
link = 'http://www.buscape.com.br/ajax/autoComplete?q=lumia'
parse_url(link)$class
parse_url(link)
View(words)
parse_url(link)$query
parse_url(link)$query$q
texto = x
texto
View(result)
sql1 = "SELECT mac_address, url"
sql2 = "FROM [ancar_labs.fluxo_urls]"
sql3 = "where shopping = '9' and date(date_time) = '2015-07-20' and
url_host = 'www.buscape.com.br'
group by mac_address, url"
sql = paste(sql1, sql2, sql3)
project = "ancar-labs-01"
sql = sql
result = query_exec(sql, project = project)
pessoas = length(unique(result$mac_address))
View(result)
end = 1:nrow(result)
x = as.character()
y = 0
for (qr in end){
link_query = as.character()
link = result[qr, "url"]
link_query_q = parse_url(link)$query$q
if (!is.null(parse_url(link)$query$q)) {
link_query = parse_url(link)$query$q
} else {
# link_query = parse_url(link)$query$rf
link_query = parse_url(link)$query$kw
}
x = paste(x, link_query)
y = rbind(y, link_query)
}
# sub_link
end = 1:nrow(y)
x_s = as.character()
y_s = 0
for (i in end){
link_query_s = as.character()
link_s = y[i, 1]
if (!is.null(parse_url(link_s)$query$q)) {link_query_s = parse_url(link_s)$query$q
}
else if (!is.null(parse_url(link_s)$path)) {link_query_s = parse_url(link_s)$path
}
else if (!is.null(parse_url(link_s)$path)) {link_query_s = link_s
}
x_s = paste(x_s, link_query_s)
y_s = rbind(y_s, link_query_s)
}
texto = x
texto
link = 'http://www.buscape.com.br/capa-para-tablet.html'
parse_url(link)$query$q
parse_url(link)$query
end = 1:nrow(result)
parse_url(link)
end = 1:nrow(result)
x = as.character()
y = 0
for (qr in end){
link_query = as.character()
link = result[qr, "url"]
link_query_q = parse_url(link)$query$q
if (!is.null(parse_url(link)$query$q)) {
link_query = parse_url(link)$query$q
} else {
# link_query = parse_url(link)$query$rf
link_query = parse_url(link)$query$kw
}
else {
# link_query = parse_url(link)$query$rf
link_query = parse_url(link)$path
}
x = paste(x, link_query)
y = rbind(y, link_query)
}
end = 1:nrow(result)
x = as.character()
y = 0
for (qr in end){
link_query = as.character()
link = result[qr, "url"]
link_query_q = parse_url(link)$query$q
if (!is.null(parse_url(link)$query$q)) {
link_query = parse_url(link)$query$q
} else if (!is.null(parse_url(link)$query$kw)){
# link_query = parse_url(link)$query$rf
link_query = parse_url(link)$query$kw
}
else {
# link_query = parse_url(link)$query$rf
link_query = parse_url(link)$path
}
x = paste(x, link_query)
y = rbind(y, link_query)
}
texto = x
texto
texto_1 <- gsub("http://www.", " ", texto)
texto_2 <- gsub("http://", " ", texto_1)
texto_3 <- gsub("https", " ", texto_2)
texto_4 <- gsub(".html", " ", texto_3)
texto_5 <- gsub(".net", " ", texto_4)
texto_6 <- gsub("([%20])|[%]|[&]", " ", texto_5)
texto_7 <- gsub("([[:digit:]])", " ", texto_6)
texto_8 <- gsub("(html)|(php)|(http)|(api)|(www)", " ", texto_7)
abc.corpus <- Corpus(VectorSource(texto_8))
abc.corpus <- tm_map(abc.corpus, function(x)removeWords(x,stopwords("portuguese")))
term.matrix <- TermDocumentMatrix(abc.corpus)
term.matrix <- as.matrix(term.matrix)
words_n = row.names(term.matrix)
words_n = data.frame(words_n)
n = term.matrix[, 1]
words = cbind(words_n, n)
row.names(words) = NULL
View(words)
for (qr in end){
link_query = as.character()
link = result[qr, "url"]
link_query_q = parse_url(link)$query$q
if (!is.null(parse_url(link)$query$q)) { link_query = parse_url(link)$query$q }
else if (!is.null(parse_url(link)$query$kw)) { link_query = parse_url(link)$query$kw }
else if  (!is.null(parse_url(link)$path)) { link_query = parse_url(link)$path}
x = paste(x, link_query)
y = rbind(y, link_query)
}
texto = x
texto
texto_1 <- gsub("http://www.", " ", texto)
texto_2 <- gsub("http://", " ", texto_1)
texto_3 <- gsub("https", " ", texto_2)
texto_4 <- gsub(".html", " ", texto_3)
texto_5 <- gsub(".net", " ", texto_4)
texto_6 <- gsub("([%20])|[%]|[&]", " ", texto_5)
texto_7 <- gsub("([[:digit:]])", " ", texto_6)
texto_8 <- gsub("(html)|(php)|(http)|(api)|(www)", " ", texto_7)
abc.corpus <- Corpus(VectorSource(texto_8))
abc.corpus <- tm_map(abc.corpus, function(x)removeWords(x,stopwords("portuguese")))
term.matrix <- TermDocumentMatrix(abc.corpus)
term.matrix <- as.matrix(term.matrix)
words_n = row.names(term.matrix)
words_n = data.frame(words_n)
n = term.matrix[, 1]
words = cbind(words_n, n)
row.names(words) = NULL
View(words)
texto = x
texto
abc.corpus <- Corpus(VectorSource(texto))
abc.corpus <- tm_map(abc.corpus, function(x)removeWords(x,stopwords("portuguese")))
term.matrix <- TermDocumentMatrix(abc.corpus)
term.matrix <- as.matrix(term.matrix)
words_n = row.names(term.matrix)
words_n = data.frame(words_n)
n = term.matrix[, 1]
words = cbind(words_n, n)
row.names(words) = NULL
View(words)
sql1 = "SELECT mac_address, url"
sql2 = "FROM [ancar_labs.fluxo_urls]"
sql3 = "where shopping = '9' and date(date_time) = '2015-07-22' and
url_host = 'www.buscape.com.br'
group by mac_address, url"
sql = paste(sql1, sql2, sql3)
project = "ancar-labs-01"
sql = sql
result = query_exec(sql, project = project)
pessoas = length(unique(result$mac_address))
end = 1:nrow(result)
x = as.character()
y = 0
for (qr in end){
link_query = as.character()
link = result[qr, "url"]
link_query_q = parse_url(link)$query$q
if (!is.null(parse_url(link)$query$q)) { link_query = parse_url(link)$query$q }
else if (!is.null(parse_url(link)$query$kw)) { link_query = parse_url(link)$query$kw }
else if  (!is.null(parse_url(link)$path)) { link_query = parse_url(link)$path}
x = paste(x, link_query)
y = rbind(y, link_query)
}
texto = x
abc.corpus <- Corpus(VectorSource(texto))
abc.corpus <- tm_map(abc.corpus, function(x)removeWords(x,stopwords("portuguese")))
term.matrix <- TermDocumentMatrix(abc.corpus)
term.matrix <- as.matrix(term.matrix)
words_n = row.names(term.matrix)
words_n = data.frame(words_n)
n = term.matrix[, 1]
words = cbind(words_n, n)
row.names(words) = NULL
View(words)
texto = x
texto
View(result)
library(arules); library(arulesViz)
data("Groceries")
summary(Groceries)
rules = apriori(Groceries, parameter=list(support = 0.01, confidence = 0.1))
summary(rules)
options(digits=2)
inspect(rules[1:15])
rules = apriori(Groceries, parameter=list(support = 0.01, confidence = 0.8))
inspect(rules[1:15])
rules = apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
rules = apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
inspect(rules[1:15])
sort(rules, decreasing=TRUE,by="confidence")
x = sort(rules, decreasing=TRUE,by="confidence")
x
sort(rules[1:15], decreasing=TRUE,by="confidence")
inspect(sort(rules[1:15], decreasing=TRUE,by="confidence"))
itemFrequencyPlot(Groceries,topN=20)
itemFrequencyPlot(Groceries,topN=20,type="absolute")
itemFrequencyPlot(Groceries,topN=20)
itemFrequencyPlot(Groceries,topN=20,type="absolute")
itemFrequencyPlot(Groceries,topN=20,type="percent")
itemFrequencyPlot(Groceries,topN=20,type="relative")
summary(rules)
inspect(sort(rules, decreasing=TRUE,by="confidence"))
inspect(sort(rules[1:15], decreasing=TRUE,by="confidence"))
summary(rules)
rules = apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
inspect(sort(rules[1:15], decreasing=TRUE,by="confidence"))
inspect(sort(rules, decreasing=TRUE,by="confidence"))
inspect(sort(rules[1:100], decreasing=TRUE,by="confidence"))
inspect(sort(rules[1:100], decreasing=TRUE,by="confidence"))
inspect(sort(rules[1:52], decreasing=TRUE,by="confidence"))
inspect(sort(rules[1:15], decreasing=TRUE,by="confidence"))
inspect(sort(rules[1:15], decreasing=TRUE,by="support"))
inspect(sort(rules[1:15], decreasing=TRUE,by="support"))
rules1<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.8),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules1<-sort(rules1, decreasing=TRUE,by="confidence")
inspect(rules1[1:5])
plot(rules1[1:5],method="graph",interactive=TRUE)
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.8,minlen=2),
appearance = list(default="rhs",lhs="whole milk"),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="whole milk"),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
plot(rules2[1:5],method="graph",interactive=TRUE)
rules1<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules1<-sort(rules1, decreasing=TRUE,by="confidence")
inspect(rules1[1:5])
plot(rules1[1:5],method="graph",interactive=TRUE)
plot(rules1[1:5],method="graph",interactive=TRUE)
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="whole milk"),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="whole milk"),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules1<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08),
appearance = list(default="lhs",rhs="whole milk"),
control = list(verbose=F))
rules1<-sort(rules1, decreasing=TRUE,by="confidence")
inspect(rules1[1:5])
appearance = list(default="rhs",lhs="canned fish,hygiene articles"),
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="whole milk","canned fish"),
control = list(verbose=F))
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="whole milk, canned fish"),
control = list(verbose=F))
plot(rules1[1:5],method="graph",interactive=TRUE, shading="confidence")
plot(rules1[1:5],method="graph",interactive=TRUE, shading="support")
plot(rules1[1:5],method="graph",interactive=TRUE)
inspect(rules1[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="{root vegetables,whipped/sour cream,flour}"),
control = list(verbose=F))
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs= list(rice, sugar)),
control = list(verbose=F))
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="whole milk"),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
?apriori
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "sugar")),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
inspect(rules[1:15])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "bottled water")),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "domestic eggs")),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("turkey", "curd")),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("turkey", "curd")),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "sugar")),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:5])
inspect(sort(rules[1:15], decreasing=TRUE,by="support"))
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "sugar")),
control = list(verbose=F))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2)
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "sugar")))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2)
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "sugar")), minlen = 2)
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "sugar"),minlen = 2))
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs=c("rice", "sugar")))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2)
s <- Groceries[,itemFrequency(Groceries)>0.05]
d_jaccard <- dissimilarity(s, which = "items")
plot(hclust(d_jaccard, method = "ward"))
s <- Groceries[,itemFrequency(Groceries)>0.1]
d_jaccard <- dissimilarity(s, which = "items")
plot(hclust(d_jaccard, method = "ward"))
s <- Groceries[,itemFrequency(Groceries)>0.1]
d_jaccard <- dissimilarity(s, which = "items")
plot(hclust(d_jaccard, method = "ward.D2"))
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="rice"))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2)
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="chicken"))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2)
rules2<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2),
appearance = list(default="rhs",lhs="bottled water"))
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2)
install.packages("shiny")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("manipulate")
manipulate(myPlot, s = slider(0, 2, step = 0.1))
libary(manipulate)
library(manipulate)
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
require("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("install.github")
install.packages("install_github")
install.packages("rgit")
install.packages("googleVis")
demo(googleVis)
library(googleVis)
demo(googleVis)
library(slidify)
library(slidify)
library(devtools)
install.packages("Rcpp")
library(Rcpp)
library(devtools)
install.packages("devtools")
install.packages("devtools")
devtools
install.packages("devtools")
install.packages("devtools")
---
install.packages('stringr')
devtools::install_github('muschellij2/slidify')
library("slidify")
getwd()
setwd("C:\\Raphael\\estudos\\datasciencecoursera\\Developing Data Products\\CourseProject")
getwd()
author("CourseProject")
- Example: {cheese} appears in 1% of the whole dataset. {cheese, bread} appears 0.1%
library(arules);library(arulesViz)
data("Groceries")
plot(apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
[1:100], method = "grouped")
summary(apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
[1:100], method = "grouped")
inspect(apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
[1:100], method = "grouped")
inspect(apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
[1:10], method = "grouped")
rules = apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8)
rules = apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
rules = apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
plot(apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8)))
plot(apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8)))
summary(Groceries)
inspect(Groceries[1:10])
as.data.frame(inspect(Groceries[1:10]))
as.data.frame(inspect(Groceries[1:10]))
as.data.frame(inspect(Groceries[1:10]))
Groceries[1:10]
inspect(Groceries[1:10])
rules = apriori(Groceries, confidence = 0.8, support = 0.001)
rules = apriori(data = Groceries, confidence = 0.8, support = 0.001)
rules = apriori(Groceries, parameter=list(support = 0.001, confidence = 0.8))
inspect(rules[1:10])
plot(rules, method = "grouped", width = "500px")
publish("smithraphael", html_file = "index.html", host = "rpubs")
slidify-rautu
publish("slidify-smithraphael", html_file = "index.html", host = "rpubs")
getwd()
publish(title = 'CourseProject', 'index.html', host = 'rpubs')
find.package("RCurl")
inspect(rules[1:10])
source('~/.active-rstudio-document', echo=TRUE)
install.packages("markdown")
